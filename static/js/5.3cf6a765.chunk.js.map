{"version":3,"sources":["assets/utils/api.js","assets/utils/utils.js","redux/posts/posts.actions.js","redux/posts/posts.selectors.js","modules/home/index.jsx"],"names":["baseUrl","process","postRequest","url","data","config","axios","post","putRequest","put","get","remove","delete","loadingDiv","document","getElementById","loadingText","showSpinner","spinnerText","style","visibility","innerText","hideSpinner","getPostsAsync","dispatch","type","PostsActionTypes","GET_POSTS_START","then","res","posts","GET_POSTS_SUCCESS","payload","catch","err","error","message","GET_POSTS_FAILURE","getPostAsync","params","id","GET_POST_START","GET_POST_SUCCESS","GET_POST_FAILURE","createPostAsync","getState","CREATE_POST_START","object","objects","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","updatePostAsync","UPDATE_POST_START","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","deletePostAsync","postId","DELETE_POST_START","objectId","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","selectPosts","state","selectBlogPosts","createSelector","selectPost","getPostsError","getPostError","mapStateToProps","createStructuredSelector","connect","getPostsAsyncProp","createPostAsyncProp","updatePostAsyncProp","deletePostAsyncProp","t","useTranslation","history","useHistory","useState","selectedPost","setSelectedPost","postTitle","setPostTitle","postBody","setPostBody","createPostFlag","setCreatePostFlag","columns","field","headerName","width","useEffect","handleFieldChange","event","target","value","name","resetState","className","maxWidth","length","rows","pageSize","rowsPerPageOptions","autoHeight","onRowClick","row","title","body","onClick","variant","color","startIcon","push","label","onChange","multiline","maxRows","postObj","userId","lastId"],"mappings":"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","file":"static/js/5.3cf6a765.chunk.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport axios from 'axios'\n\nconst baseUrl = process.env.REACT_APP_API_BASE_URL\n\nexport const postRequest = (url, data, config = {}) =>\n  axios.post(`${baseUrl}${url}`, data, config)\n\nexport const patch = (url, data, config = {}) =>\n  axios.patch(`${baseUrl}${url}`, data, config)\n\nexport const putRequest = (url, data, config = {}) =>\n  axios.put(`${baseUrl}${url}`, data, config)\n\nexport const get = (url, config = {}) => axios.get(`${baseUrl}${url}`, config)\n\nexport const remove = (url, config = {}) =>\n  axios.delete(`${baseUrl}${url}`, config)\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { useTranslation } from 'react-i18next'\n\nexport const rtlClass = () => {\n  const { i18n } = useTranslation()\n  return i18n.dir() === 'rtl' ? 'rtl' : ''\n}\n\nconst loadingDiv = document.getElementById('tyro-page-loader')\nconst loadingText = document.getElementById('tyro-page-loader-text')\n\nexport const showSpinner = (spinnerText = 'Loading...') => {\n  loadingDiv.style.visibility = 'visible'\n  loadingText.innerText = spinnerText\n}\n\nexport const hideSpinner = () => {\n  loadingDiv.style.visibility = 'hidden'\n  loadingText.innerText = ''\n}\n","import PostsActionTypes from './posts.types'\nimport { get, putRequest, remove, postRequest } from '../../assets/utils/api'\nimport { showSpinner, hideSpinner } from '../../assets/utils/utils'\n\nexport const getPostsStart = () => ({\n  type: PostsActionTypes.GET_POSTS_START,\n})\n\nexport const getPostsSuccess = (posts) => ({\n  type: PostsActionTypes.GET_POSTS_SUCCESS,\n  payload: posts,\n})\n\nexport const getPostsFailure = (error) => ({\n  type: PostsActionTypes.GET_POSTS_FAILURE,\n  payload: error,\n})\n\nexport const getPostsAsync = () => (dispatch) => {\n  dispatch(getPostsStart())\n  showSpinner()\n  get('/posts')\n    .then((res) => {\n      dispatch(getPostsSuccess(res.data))\n      hideSpinner()\n    })\n    .catch((err) => {\n      dispatch(getPostsFailure(err.message))\n      hideSpinner()\n    })\n}\n\nexport const getPostStart = (id) => ({\n  type: PostsActionTypes.GET_POST_START,\n  payload: id,\n})\n\nexport const getPostSuccess = (post) => ({\n  type: PostsActionTypes.GET_POST_SUCCESS,\n  payload: post,\n})\n\nexport const getPostFailure = (error) => ({\n  type: PostsActionTypes.GET_POST_FAILURE,\n  payload: error,\n})\n\nexport const getPostAsync = (params) => (dispatch) => {\n  dispatch(getPostStart())\n  showSpinner()\n  get(`/posts/${params}`)\n    .then((res) => {\n      dispatch(getPostSuccess(res.data))\n      hideSpinner()\n    })\n    .catch((err) => {\n      dispatch(getPostFailure(err.message))\n      hideSpinner()\n    })\n}\n\nexport const createPostStart = () => ({\n  type: PostsActionTypes.CREATE_POST_START,\n})\n\nexport const createPostSuccess = (payload) => ({\n  type: PostsActionTypes.CREATE_POST_SUCCESS,\n  payload,\n})\n\nexport const createPostFailure = (error) => ({\n  type: PostsActionTypes.CREATE_POST_FAILURE,\n  payload: error,\n})\n\nexport const createPostAsync = (post) => (dispatch, getState) => {\n  dispatch(createPostStart())\n  showSpinner()\n  postRequest(`/posts`, post)\n    .then(() => {\n      const { posts } = getState().posts\n      dispatch(\n        createPostSuccess({\n          object: post,\n          objects: posts,\n        }),\n      )\n      hideSpinner()\n    })\n    .catch((err) => {\n      dispatch(createPostFailure(err.message))\n      hideSpinner()\n    })\n}\n\nexport const updatePostStart = () => ({\n  type: PostsActionTypes.UPDATE_POST_START,\n})\n\nexport const updatePostSuccess = (payload) => ({\n  type: PostsActionTypes.UPDATE_POST_SUCCESS,\n  payload,\n})\n\nexport const updatePostFailure = (error) => ({\n  type: PostsActionTypes.UPDATE_POST_FAILURE,\n  payload: error,\n})\n\nexport const updatePostAsync = (post) => (dispatch, getState) => {\n  dispatch(updatePostStart())\n  showSpinner()\n  putRequest(`/posts/${post.id}`, post)\n    .then(() => {\n      dispatch(\n        updatePostSuccess({\n          object: post,\n          objects: getState().posts.posts,\n        }),\n      )\n      hideSpinner()\n    })\n    .catch((err) => {\n      dispatch(updatePostFailure(err.message))\n      hideSpinner()\n    })\n}\n\nexport const deletePostStart = () => ({\n  type: PostsActionTypes.DELETE_POST_START,\n})\n\nexport const deletePostSuccess = (payload) => ({\n  type: PostsActionTypes.DELETE_POST_SUCCESS,\n  payload,\n})\n\nexport const deletePostFailure = (error) => ({\n  type: PostsActionTypes.DELETE_POST_FAILURE,\n  payload: error,\n})\n\nexport const deletePostAsync = (postId) => (dispatch, getState) => {\n  dispatch(deletePostStart())\n  showSpinner()\n  remove(`/posts/${postId}`)\n    .then(() => {\n      dispatch(\n        deletePostSuccess({\n          objectId: postId,\n          objects: getState().posts.posts,\n        }),\n      )\n      hideSpinner()\n    })\n    .catch((err) => {\n      dispatch(deletePostFailure(err.message))\n      hideSpinner()\n    })\n}\n","import { createSelector } from 'reselect'\n\nconst selectPosts = (state) => state.posts\n\nexport const selectBlogPosts = createSelector(\n  [selectPosts],\n  (posts) => posts.posts,\n)\n\nexport const selectPostsError = createSelector(\n  [selectPosts],\n  (posts) => posts.getPostsError,\n)\n\nexport const selectPost = createSelector([selectPosts], (posts) => posts.post)\n\nexport const selectPostError = createSelector(\n  [selectPosts],\n  (posts) => posts.getPostError,\n)\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { createStructuredSelector } from 'reselect'\nimport PropTypes from 'prop-types'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { Container, Button, TextField } from '@material-ui/core'\nimport { useHistory } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport { Add } from '@material-ui/icons'\n\nimport {\n  createPostAsync,\n  deletePostAsync,\n  getPostsAsync,\n  updatePostAsync,\n} from '../../redux/posts/posts.actions'\nimport { selectBlogPosts } from '../../redux/posts/posts.selectors'\n\nimport './index.scss'\n/**\n * Home a functional component view posts and the actions that could done on it\n * @date 2022-03-08\n * @param {func} getPostsAsyncProp\n * @param {array} posts\n * @param {func} createPostAsyncProp\n * @param {func} updatePostAsyncProp\n * @param {func} deletePostAsyncProp\n * @returns {JSX}\n */\nconst Home = ({\n  getPostsAsyncProp,\n  posts,\n  createPostAsyncProp,\n  updatePostAsyncProp,\n  deletePostAsyncProp,\n}) => {\n  const { t } = useTranslation()\n  const history = useHistory()\n  const [selectedPost, setSelectedPost] = useState(null)\n  const [postTitle, setPostTitle] = useState('')\n  const [postBody, setPostBody] = useState('')\n  const [createPostFlag, setCreatePostFlag] = useState(false)\n  const columns = [\n    { field: 'id', headerName: t('POSTS.ID'), width: 90 },\n    {\n      field: 'title',\n      headerName: t('POSTS.TITLE'),\n      width: 300,\n    },\n    {\n      field: 'body',\n      headerName: t('POSTS.BODY'),\n      width: 300,\n    },\n  ]\n\n  useEffect(() => {\n    getPostsAsyncProp()\n  }, [])\n\n  const handleOnCellClick = (data) => {\n    setSelectedPost(data)\n    setPostTitle(data.title)\n    setPostBody(data.body)\n    setCreatePostFlag(false)\n  }\n\n  const handleFieldChange = (event) => {\n    if (!event || !event.target.value) return\n    switch (event.target.name) {\n      case 'title':\n        setPostTitle(event.target.value)\n        break\n      case 'body':\n        setPostBody(event.target.value)\n        break\n      default:\n        break\n    }\n  }\n\n  const initCreatePost = () => {\n    setPostTitle('')\n    setPostBody('')\n    setCreatePostFlag(true)\n  }\n\n  const resetState = () => {\n    setSelectedPost(null)\n    setPostTitle(null)\n    setPostBody(null)\n    setCreatePostFlag(false)\n  }\n\n  const viewPostDetails = () => {\n    if (selectedPost) {\n      history.push(`/post/${selectedPost.id}`)\n    }\n  }\n\n  const addPost = () => {\n    const lastId = posts && posts.length > 0 ? posts[posts.length - 1].id : 0\n    const postObj = {\n      body: postBody,\n      title: postTitle,\n      userId: 1,\n      id: lastId + 1,\n    }\n    createPostAsyncProp(postObj)\n    resetState()\n  }\n\n  const deletePost = () => {\n    deletePostAsyncProp(selectedPost.id)\n    resetState()\n  }\n\n  const editPost = () => {\n    const postObj = {\n      body: postBody,\n      title: postTitle,\n      userId: selectedPost.userId,\n      id: selectedPost.id,\n    }\n    updatePostAsyncProp(postObj)\n    resetState()\n  }\n\n  return (\n    <Container className=\"posts-container\" maxWidth=\"md\">\n      <div className=\"data-grid\">\n        {posts && posts.length > 0 && (\n          <DataGrid\n            rows={posts}\n            columns={columns}\n            pageSize={10}\n            rowsPerPageOptions={[10]}\n            autoHeight\n            onRowClick={(params) => handleOnCellClick(params.row)}\n          />\n        )}\n      </div>\n      <div className=\"post\">\n        <div className=\"post__actions\">\n          <Button\n            onClick={initCreatePost}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Add />}\n          >\n            {t('POSTS.ADD_POST')}\n          </Button>\n          {selectedPost && (\n            <Button onClick={deletePost} variant=\"contained\" color=\"secondary\">\n              {t('POSTS.DELETE_POST')}\n            </Button>\n          )}\n          {selectedPost && (\n            <Button\n              onClick={viewPostDetails}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              {t('POSTS.VIEW_DETAILS')}\n            </Button>\n          )}\n        </div>\n        {(selectedPost || createPostFlag) && (\n          <div className=\"post__form\">\n            <div className=\"post__form-fields\">\n              <TextField\n                id=\"title\"\n                name=\"title\"\n                label={t('POSTS.TITLE')}\n                value={postTitle}\n                onChange={handleFieldChange}\n                className=\"post__form-field\"\n              />\n              <TextField\n                id=\"body\"\n                name=\"body\"\n                label={t('POSTS.BODY')}\n                value={postBody}\n                multiline\n                maxRows={5}\n                onChange={handleFieldChange}\n                className=\"post__form-field\"\n              />\n            </div>\n            <div className=\"post__form-actions\">\n              {!createPostFlag && (\n                <Button\n                  onClick={editPost}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className=\"post__form-action\"\n                >\n                  {t('POSTS.EDIT_POST')}\n                </Button>\n              )}\n              {createPostFlag && (\n                <Button\n                  onClick={addPost}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className=\"post__form-action\"\n                >\n                  {t('POSTS.ADD_POST')}\n                </Button>\n              )}\n              <Button\n                onClick={resetState}\n                variant=\"contained\"\n                color=\"secondary\"\n                className=\"post__form-action\"\n              >\n                {t('POST.CANCEL')}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </Container>\n  )\n}\n\nHome.propTypes = {\n  getPostsAsyncProp: PropTypes.func,\n  posts: PropTypes.array,\n  createPostAsyncProp: PropTypes.func,\n  updatePostAsyncProp: PropTypes.func,\n  deletePostAsyncProp: PropTypes.func,\n}\n\nconst mapStateToProps = createStructuredSelector({\n  posts: selectBlogPosts,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  getPostsAsyncProp: () => dispatch(getPostsAsync()),\n  createPostAsyncProp: (post) => dispatch(createPostAsync(post)),\n  updatePostAsyncProp: (post) => dispatch(updatePostAsync(post)),\n  deletePostAsyncProp: (postId) => dispatch(deletePostAsync(postId)),\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n"],"sourceRoot":""}